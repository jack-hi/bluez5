#!/usr/bin/python
# -*- coding: UTF-8 -*-
#

from __future__ import absolute_import, print_function, unicode_literals

import dbus
import dbus.mainloop.glib
try:
  from gi.repository import GObject
except ImportError:
  import gobject as GObject

import sys
import os 
import socket
import time
import threading
import bluezutils
import dbus.service
import bluezagent
import logging

# UnicodeDecodeError
reload(sys)
sys.setdefaultencoding('utf8')

_dbus2py = {
	dbus.String : str,
	dbus.UInt32 : int,
	dbus.Int32 : int,
	dbus.Int16 : int,
	dbus.UInt16 : int,
	dbus.UInt64 : int,
	dbus.Int64 : int,
	dbus.Byte : int,
	dbus.Boolean : bool,
	dbus.ByteArray : str,
	dbus.ObjectPath : str
    }

def dbus2py(d):
	t = type(d)
	if t in _dbus2py:
		return _dbus2py[t](d)
	if t is dbus.Dictionary:
		return dict([(dbus2py(k), dbus2py(v)) for k, v in d.items()])
	if t is dbus.Array and d.signature == "y":
		return "".join([chr(b) for b in d])
	if t is dbus.Array or t is list:
		return [dbus2py(v) for v in d]
	if t is dbus.Struct or t is tuple:
		return tuple([dbus2py(v) for v in d])
	return d

def pretty(d):
	d = dbus2py(d)
	t = type(d)

	if t in (dict, tuple, list) and len(d) > 0:
		if t is dict:
			d = ", ".join(["%s = %s" % (k, pretty(v))
					for k, v in d.items()])
			return "{ %s }" % d

		d = " ".join([pretty(e) for e in d])

		if t is tuple:
			return "( %s )" % d

	if t is str:
		return "%s" % d

	return str(d)

def print_info(info):
	global client
	if client:
		try:
			client.send(info)
		except socket.error, e:
			logging.warning('Exception: %s' % e)
			client.close()
			client = None
	logging.info(info)

def do_adapter_ready():
	global adapter_ready, devices, bus
	if adapter_ready:
		pass
	else:
		adapter_ready = True
		# get managed devices 	
		om = dbus.Interface(bus.get_object('org.bluez', '/'),
				'org.freedesktop.DBus.ObjectManager')
		objects = om.GetManagedObjects()
		for path, ifaces in objects.iteritems():
			if 'org.bluez.Device1' in ifaces:
				devices[path] = ifaces['org.bluez.Device1']
		# register default agent 
		bluezagent.StartDefaultAgent(bus, '/bt/default/agent')
		# Adapter Ready
		print_info("Adapter:Adapter=Ready,&")

def bluez_property_changed(interface, changed, invalidated, path):
	do_adapter_ready()
	info = ""
	if 'org.bluez.Device1' == interface:
		for prop in ['Paired', 'Connected', 'Trusted', 'RSSI']:
			if changed.get(prop) is not None:
				info = info + prop + '=' + pretty(changed[prop]) + ','
		if len(info) > 0:
			addr = devices[path]['Address']
			name = devices[path]['Alias']
			info = 'Address=' + addr + ',' + 'Alias=' + name + ',' + info
	elif 'org.bluez.Adapter1' == interface:
		for prop in ['Powered', 'Discoverable', 'Discovering']:
			if changed.get(prop) is not None:
				info = info + prop + '=' + pretty(changed.get(prop)) + ','
	elif 'org.bluez.MediaPlayer1' == interface:
		for prop in ['Status']:
			if changed.get(prop) is not None:
				info = info + prop + '=' + pretty(changed.get(prop)) + ','
	elif 'org.bluez.MediaControl1' == interface:
		for prop in ['Connected']:
			if changed.get(prop) is not None:
				info = info + "MediaConnected" + '=' + pretty(changed.get(prop)) + ','
	elif 'org.bluez.MediaTransport1' == interface:
		for prop in ['Volume']:
			if changed.get(prop) is not None:
				info = info + prop + '=' + pretty(changed[prop]) + ','
	else:
		pass

	if len(info) > 0:
		info = interface[interface.rfind('.')+1:] + ':' + info + '&'
		print_info(info) 

def bluez_interface_added(path, interface):
	do_adapter_ready()
	info = ""
	if 'org.bluez.Device1' in interface:
		info = "NewDevice:"
		devices[path] = dev = interface['org.bluez.Device1']
		for p in ['Address', 'Alias']:
			if dev.get(p) is None:
				continue
			if type(dev[p]) is dbus.String:
				p = unicode(p).encode('ascii', 'replace')
			info = info + p + '=' + dev[p] + ','
	
	if len(info) > 0:
		info = info + '&'
		print_info(info) 

def bluez_interface_removed(path, interface):
	do_adapter_ready()
	if 'org.bluez.Device1' not in interface:
		return
	addr = devices[path]['Address']
	info = 'DelDevice:Address=' + addr +',&'
	print_info(info) 
	del devices[path]

def call_added(name, value):
	state = value['State']
	number = value['LineIdentification']
	print_info("VoiceCall:State=%s,Number=%s,&" % (state, number))

def call_states(name, value):
	if name in ['State']:
		print_info("VoiceCall:State=%s,&" % value)

def dump_server():
	global client
	server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	sock_file = '/tmp/bt-server.sock'
	if os.path.exists(sock_file):
		os.remove(sock_file)
	server.bind(sock_file)	
	server.listen(5)
	while 1: 
		(cli, addr) = server.accept()
		if client:
			client.close()
		client = cli 
		if adapter_ready:
			print_info("Adapter:Adapter=Ready,&")
		else:
			print_info("Adapter:Adapter=NotReady,&")

# global vars
bus = None
devices = {}
adapter_ready = False
client = None

if __name__ == '__main__':
	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	# set logging 
	logging.basicConfig(format = '%(asctime)s: %(message)s', 
						filename = '/tmp/bt-monitor.log',
						level = logging.INFO)

	# create dump server thread
	threading.Thread(target=dump_server).start()

	bus = dbus.SystemBus()
	bus.add_signal_receiver(bluez_property_changed, 
			bus_name="org.bluez",
			dbus_interface="org.freedesktop.DBus.Properties",
			signal_name="PropertiesChanged",
			path_keyword="path")

	bus.add_signal_receiver(bluez_interface_added, 
			bus_name="org.bluez",
			dbus_interface="org.freedesktop.DBus.ObjectManager",
			signal_name="InterfacesAdded")

	bus.add_signal_receiver(bluez_interface_removed, 
			bus_name="org.bluez",
			dbus_interface="org.freedesktop.DBus.ObjectManager",
			signal_name="InterfacesRemoved")

	bus.add_signal_receiver(call_added,
			bus_name="org.ofono",
			signal_name="CallAdded")

	bus.add_signal_receiver(call_states,
			bus_name="org.ofono",
			signal_name="PropertyChanged")

	mainloop = GObject.MainLoop()
	mainloop.run()
